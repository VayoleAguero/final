package com.example.message.utils.cipher;

import org.bouncycastle.crypto.engines.RC4Engine;
import org.bouncycastle.crypto.params.KeyParameter;

/**
 * Класс для шифрования и дешифрования данных с использованием алгоритма RC4.
 * <p>
 * Этот класс реализует шифрование и дешифрование данных с использованием симметричного
 * потокового шифра RC4. RC4 применяет операцию побитового исключающего ИЛИ (XOR) для шифрования
 * и дешифрования данных с использованием одного и того же ключа.
 * </p>
 *
 * @see RC4Engine
 */
public class RC4 {

    /**
     * Метод для шифрования или дешифрования данных с использованием алгоритма RC4.
     * <p>
     * Потоковый шифр RC4 использует ключ для генерации потока данных, который затем
     * применяется к исходным данным с помощью операции XOR. Важно, что для дешифрования
     * используется тот же ключ, что и для шифрования.
     * </p>
     *
     * @param input Входной массив байтов для шифрования или дешифрования.
     * @param key Ключ для шифрования. Должен быть известен как для шифрования, так и для дешифрования.
     * @return Результат шифрования или дешифрования в виде массива байтов.
     */
    public static byte[] rc4EncryptDecrypt(byte[] input, byte[] key) {
        // Инициализация движка RC4 с ключом
        RC4Engine rc4 = new RC4Engine();
        rc4.init(true, new KeyParameter(key));

        // Массив для хранения выходных данных
        byte[] output = new byte[input.length];

        // Применяем процесс шифрования или дешифрования
        rc4.processBytes(input, 0, input.length, output, 0);

        return output;
    }
}
